// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package simulator

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StatusLineT struct {
	Version    string
	StatusCode int32
	StatusText string
}

func (t *StatusLineT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	VersionOffset := builder.CreateString(t.Version)
	StatusTextOffset := builder.CreateString(t.StatusText)
	StatusLineStart(builder)
	StatusLineAddVersion(builder, VersionOffset)
	StatusLineAddStatusCode(builder, t.StatusCode)
	StatusLineAddStatusText(builder, StatusTextOffset)
	return StatusLineEnd(builder)
}

func (rcv *StatusLine) UnPackTo(t *StatusLineT) {
	t.Version = string(rcv.Version())
	t.StatusCode = rcv.StatusCode()
	t.StatusText = string(rcv.StatusText())
}

func (rcv *StatusLine) UnPack() *StatusLineT {
	if rcv == nil {
		return nil
	}
	t := &StatusLineT{}
	rcv.UnPackTo(t)
	return t
}

func (rcv *StatusLineT) Builder() *flatbuffers.Builder {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b
}

func (rcv *StatusLineT) Marshal() []byte {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b.FinishedBytes()
}

func UnmarshalStatusLineT(b []byte) *StatusLineT {
	return GetRootAsStatusLine(b, 0).UnPack()
}

type StatusLine struct {
	_tab flatbuffers.Table
}

func GetRootAsStatusLine(buf []byte, offset flatbuffers.UOffsetT) *StatusLine {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatusLine{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StatusLine) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StatusLine) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StatusLine) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StatusLine) StatusCode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusLine) MutateStatusCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *StatusLine) StatusText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StatusLineStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}

func StatusLineAddVersion(builder *flatbuffers.Builder, Version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Version), 0)
}

func StatusLineAddStatusCode(builder *flatbuffers.Builder, StatusCode int32) {
	builder.PrependInt32Slot(1, StatusCode, 0)
}

func StatusLineAddStatusText(builder *flatbuffers.Builder, StatusText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(StatusText), 0)
}

func StatusLineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
