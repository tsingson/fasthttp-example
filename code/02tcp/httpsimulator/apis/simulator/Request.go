// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package simulator

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// HTTPayload cache
type RequestT struct {
	Start   *StartlineT
	Headers []*HeaderT
	Payload []byte
}

func (t *RequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	StartOffset := t.Start.Pack(builder)
	HeadersOffset := flatbuffers.UOffsetT(0)
	if t.Headers != nil {
		HeadersLength := len(t.Headers)
		HeadersOffsets := make([]flatbuffers.UOffsetT, HeadersLength)
		for j := 0; j < HeadersLength; j++ {
			HeadersOffsets[j] = t.Headers[j].Pack(builder)
		}
		RequestStartHeadersVector(builder, HeadersLength)
		for j := HeadersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(HeadersOffsets[j])
		}
		HeadersOffset = builder.EndVector(HeadersLength)
	}
	payloadOffset := flatbuffers.UOffsetT(0)
	if t.Payload != nil {
		payloadOffset = builder.CreateByteString(t.Payload)
	}
	RequestStart(builder)
	RequestAddStart(builder, StartOffset)
	RequestAddHeaders(builder, HeadersOffset)
	RequestAddPayload(builder, payloadOffset)
	return RequestEnd(builder)
}

func (rcv *Request) UnPackTo(t *RequestT) {
	t.Start = rcv.Start(nil).UnPack()
	HeadersLength := rcv.HeadersLength()
	t.Headers = make([]*HeaderT, HeadersLength)
	for j := 0; j < HeadersLength; j++ {
		x := Header{}
		rcv.Headers(&x, j)
		t.Headers[j] = x.UnPack()
	}
	t.Payload = rcv.PayloadBytes()
}

func (rcv *Request) UnPack() *RequestT {
	if rcv == nil {
		return nil
	}
	t := &RequestT{}
	rcv.UnPackTo(t)
	return t
}

func (rcv *RequestT) Builder() *flatbuffers.Builder {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b
}

func (rcv *RequestT) Marshal() []byte {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b.FinishedBytes()
}

func UnmarshalRequestT(b []byte) *RequestT {
	return GetRootAsRequest(b, 0).UnPack()
}

type Request struct {
	_tab flatbuffers.Table
}

func GetRootAsRequest(buf []byte, offset flatbuffers.UOffsetT) *Request {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Request{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Request) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Request) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Request) Start(obj *Startline) *Startline {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Startline)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Request) Headers(obj *Header, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Request) HeadersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Request) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Request) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Request) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Request) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}

func RequestAddStart(builder *flatbuffers.Builder, Start flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Start), 0)
}

func RequestAddHeaders(builder *flatbuffers.Builder, Headers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Headers), 0)
}

func RequestStartHeadersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func RequestAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(payload), 0)
}

func RequestStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}

func RequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
