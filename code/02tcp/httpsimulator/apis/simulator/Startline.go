// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package simulator

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StartlineT struct {
	Method  Method
	URL     string
	Version string
}

func (t *StartlineT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	URLOffset := builder.CreateString(t.URL)
	VersionOffset := builder.CreateString(t.Version)
	StartlineStart(builder)
	StartlineAddMethod(builder, t.Method)
	StartlineAddURL(builder, URLOffset)
	StartlineAddVersion(builder, VersionOffset)
	return StartlineEnd(builder)
}

func (rcv *Startline) UnPackTo(t *StartlineT) {
	t.Method = rcv.Method()
	t.URL = string(rcv.URL())
	t.Version = string(rcv.Version())
}

func (rcv *Startline) UnPack() *StartlineT {
	if rcv == nil {
		return nil
	}
	t := &StartlineT{}
	rcv.UnPackTo(t)
	return t
}

func (rcv *StartlineT) Builder() *flatbuffers.Builder {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b
}

func (rcv *StartlineT) Marshal() []byte {
	b := flatbuffers.NewBuilder(0)
	b.Finish(rcv.Pack(b))
	return b.FinishedBytes()
}

func UnmarshalStartlineT(b []byte) *StartlineT {
	return GetRootAsStartline(b, 0).UnPack()
}

type Startline struct {
	_tab flatbuffers.Table
}

func GetRootAsStartline(buf []byte, offset flatbuffers.UOffsetT) *Startline {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Startline{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Startline) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Startline) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Startline) Method() Method {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Method(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Startline) MutateMethod(n Method) bool {
	return rcv._tab.MutateInt16Slot(4, int16(n))
}

func (rcv *Startline) URL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Startline) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StartlineStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}

func StartlineAddMethod(builder *flatbuffers.Builder, method Method) {
	builder.PrependInt16Slot(0, int16(method), 0)
}

func StartlineAddURL(builder *flatbuffers.Builder, URL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(URL), 0)
}

func StartlineAddVersion(builder *flatbuffers.Builder, Version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Version), 0)
}

func StartlineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
